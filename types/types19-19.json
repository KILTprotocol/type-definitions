{
  "AccountInfo": "AccountInfoWithTripleRefCount",
  "Address": "MultiAddress",
  "AmountOf": "i128",
  "Balance": "u128",
  "BlockNumber": "u64",
  "Index": "u64",
  "LookupSource": "MultiAddress",
  "CtypeCreatorOf": "AccountId",
  "CtypeHashOf": "Hash",
  "ClaimHashOf": "Hash",
  "AttesterOf": "AccountId",
  "AttestationDetails": {
    "ctypeHash": "CtypeHashOf",
    "attester": "AttesterOf",
    "delegationId": "Option<DelegationNodeIdOf>",
    "revoked": "bool"
  },
  "Permissions": "u32",
  "DelegationNodeIdOf": "Hash",
  "DelegatorIdOf": "AccountId",
  "DelegateSignatureTypeOf": "Vec<u8>",
  "DelegationRoot": {
    "ctypeHash": "CtypeHashOf",
    "owner": "DelegatorIdOf",
    "revoked": "bool"
  },
  "DelegationNode": {
    "hierarchyRootId": "DelegationNodeIdOf",
    "parent": "Option<DelegationNodeIdOf>",
    "children": "BTreeSet<DelegationNodeIdOf>",
    "details": "DelegationDetails"
  },
  "KeyIdOf": "Hash",
  "DidIdentifierOf": "AccountId",
  "AccountIdentifierOf": "AccountId",
  "BlockNumberOf": "BlockNumber",
  "DidCallableOf": "Call",
  "DidVerificationKey": {
    "_enum": {
      "Ed25519": "[u8; 32]",
      "Sr25519": "[u8; 32]",
      "Secp256k1": "[u8; 33]"
    }
  },
  "DidEncryptionKey": {
    "_enum": {
      "X25519": "[u8; 32]"
    }
  },
  "DidPublicKey": {
    "_enum": {
      "PublicVerificationKey": "DidVerificationKey",
      "PublicEncryptionKey": "DidEncryptionKey"
    }
  },
  "DidVerificationKeyRelationship": {
    "_enum": [
      "Authentication",
      "CapabilityDelegation",
      "CapabilityInvocation",
      "AssertionMethod"
    ]
  },
  "DidSignature": {
    "_enum": {
      "Ed25519": "Ed25519Signature",
      "Sr25519": "Sr25519Signature",
      "Ecdsa-Secp256k1": "EcdsaSignature"
    }
  },
  "DidError": {
    "_enum": {
      "StorageError": "StorageError",
      "SignatureError": "SignatureError",
      "UrlError": "UrlError",
      "InputError": "InputError",
      "InternalError": "Null"
    }
  },
  "StorageError": {
    "_enum": {
      "DidAlreadyPresent": "Null",
      "DidNotPresent": "Null",
      "DidKeyNotPresent": "DidVerificationKeyRelationship",
      "VerificationKeyNotPresent": "Null",
      "CurrentlyActiveKey": "Null",
      "MaxTxCounterValue": "Null"
    }
  },
  "SignatureError": {
    "_enum": [
      "InvalidSignatureFormat",
      "InvalidSignature",
      "InvalidNonce"
    ]
  },
  "KeyError": {
    "_enum": [
      "InvalidVerificationKeyFormat",
      "InvalidEncryptionKeyFormat"
    ]
  },
  "UrlError": {
    "_enum": [
      "InvalidUrlEncoding",
      "InvalidUrlScheme"
    ]
  },
  "InputError": {
    "_enum": [
      "MaxKeyAgreementKeysLimitExceeded",
      "MaxVerificationKeysToRemoveLimitExceeded",
      "MaxUrlLengthExceeded"
    ]
  },
  "DidPublicKeyDetails": {
    "key": "DidPublicKey",
    "blockNumber": "BlockNumberOf"
  },
  "DidDetails": {
    "authenticationKey": "KeyIdOf",
    "keyAgreementKeys": "BTreeSet<KeyIdOf>",
    "delegationKey": "Option<KeyIdOf>",
    "attestationKey": "Option<KeyIdOf>",
    "publicKeys": "BTreeMap<KeyIdOf, DidPublicKeyDetails>",
    "serviceEndpoints": "Option<ServiceEndpoints>",
    "lastTxCounter": "u64"
  },
  "DidAuthorizedCallOperation": {
    "did": "DidIdentifierOf",
    "txCounter": "u64",
    "call": "DidCallableOf"
  },
  "HttpUrl": {
    "payload": "Text"
  },
  "FtpUrl": {
    "payload": "Text"
  },
  "IpfsUrl": {
    "payload": "Text"
  },
  "Url": {
    "_enum": {
      "Http": "HttpUrl",
      "Ftp": "FtpUrl",
      "Ipfs": "IpfsUrl"
    }
  },
  "LockedBalance": {
    "block": "BlockNumber",
    "amount": "Balance"
  },
  "BalanceOf": "Balance",
  "RoundInfo": {
    "current": "SessionIndex",
    "first": "BlockNumber",
    "length": "BlockNumber"
  },
  "OrderedSet": "Vec<Stake>",
  "Stake": {
    "owner": "AccountId",
    "amount": "Balance"
  },
  "TotalStake": {
    "collators": "Balance",
    "delegators": "Balance"
  },
  "InflationInfo": {
    "collator": "StakingInfo",
    "delegator": "StakingInfo"
  },
  "StakingInfo": {
    "maxRate": "Perquintill",
    "rewardRate": "RewardRate"
  },
  "RewardRate": {
    "annual": "Perquintill",
    "perBlock": "Perquintill"
  },
  "Delegator": {
    "delegations": "Vec<Stake>",
    "total": "Balance"
  },
  "CollatorSnapshot": {
    "stake": "Balance",
    "delegators": "Vec<Stake>",
    "total": "Balance"
  },
  "Collator": {
    "id": "AccountId",
    "stake": "Balance",
    "delegators": "Vec<Stake>",
    "total": "Balance",
    "state": "CollatorStatus"
  },
  "CollatorStatus": {
    "_enum": {
      "Active": "Null",
      "Leaving": "SessionIndex"
    }
  },
  "DelegationCounter": {
    "round": "SessionIndex",
    "counter": "u32"
  },
  "DelegationDetails": {
    "owner": "DelegatorIdOf",
    "revoked": "bool",
    "permissions": "Permissions"
  },
  "DelegationHierarchyDetails": {
    "ctypeHash": "CtypeHashOf"
  },
  "DelegationStorageVersion": {
    "_enum": [
      "V1",
      "V2"
    ]
  },
  "DidCreationDetails": {
    "did": "DidIdentifierOf",
    "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
    "newAttestationKey": "Option<DidVerificationKey>",
    "newDelegationKey": "Option<DidVerificationKey>",
    "newServiceEndpoints": "Option<ServiceEndpoints>"
  },
  "DidUpdateDetails": {
    "newAuthenticationKey": "Option<DidVerificationKey>",
    "newKeyAgreementKeys": "BTreeSet<DidEncryptionKey>",
    "attestationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
    "delegationKeyUpdate": "DidFragmentUpdateAction_DidVerificationKey",
    "publicKeysToRemove": "BTreeSet<KeyIdOf>",
    "serviceEndpointsUpdate": "DidFragmentUpdateAction_ServiceEndpoints"
  },
  "ServiceEndpoints": {
    "contentHash": "Hash",
    "urls": "Vec<Url>",
    "contentType": "ContentType"
  },
  "DidFragmentUpdateAction_ServiceEndpoints": {
    "_enum": {
      "Ignore": "Null",
      "Change": "ServiceEndpoints",
      "Delete": "Null"
    }
  },
  "DidFragmentUpdateAction_DidVerificationKey": {
    "_enum": {
      "Ignore": "Null",
      "Change": "DidVerificationKey",
      "Delete": "Null"
    }
  },
  "ContentType": {
    "_enum": [
      "ApplicationJson",
      "ApplicationJsonLd"
    ]
  },
  "DidStorageVersion": {
    "_enum": [
      "V1",
      "V2"
    ]
  }
}